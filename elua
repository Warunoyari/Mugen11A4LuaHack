-- BEGIN CONFIGURATION

    -- name of this file (should NEVER be changed due to ROP dependency) - note you should also never rename or move this file!
    local EXPLOIT_FILENAME = "elua"
    -- path to the library for C interface - you can move or rename this, but make sure not to include the `.lua` extension in this constant.
    local EXPLOIT_LIBRARY = "Supernull/MLL/mll"

    -- location of the payload DLL files - feel free to modify + rename these, however, it may not load unless you leave the DLL extension intact
    local EXPLOIT_FFILIB = "Supernull/Libraries/ffi.dll"
    local EXPLOIT_LUALIB = "Supernull/Libraries/lua5.1.dll"

    -- location of a folder containing any functions we will be memory-mapping and using
    local EXPLOIT_FUNCTION_FOLDER = "Supernull/Functions/"

-- END CONFIGURATION



--- Reusable Global Vars
JumpDistance = -1;

function bootstrap()
    mugen.log("\n\nProcessing exploit script in " .. EXPLOIT_FILENAME .. '...\n')

    -- get folder containing this elua file
    local sourcefile = debug.getinfo(1, "S").source
    local sourcefolder = string.sub(sourcefile, 2, string.len(sourcefile) - string.len(EXPLOIT_FILENAME))
    -- 1.1b1 restricts package.path to be `data/?.lua`, but we can just add another load path here
    package.path = package.path .. ";./?.lua;./?"

    -- attempt to load mll.lua -- we load this into the global table for use later
    _G.mll = require(sourcefolder .. EXPLOIT_LIBRARY)
    mll.LoadBaseLibraries(sourcefolder, EXPLOIT_LUALIB, EXPLOIT_FFILIB)

    if not mll.VirtualProtect(0x400000, 0x100000, 0x40) then os.exit(-1) end
    if not mll.VirtualProtect(0x67BD0210, 0x1000, 0x40) then os.exit(-1) end
    mugen.log("Successfully granted execute permissions in both memory regions.\n\n")

    local stubFunctionAddress = mll.MemoryMapFile(sourcefolder .. EXPLOIT_FUNCTION_FOLDER .. "stub.bin", 0x2000, 0x40)
    if stubFunctionAddress == 0 then os.exit(-1) end
    mugen.log(string.format("Stub return function is loaded into memory at 0x%08x.\n\n", tonumber(stubFunctionAddress)))

    -- overwrite return address from Lua execution
    local preservedStack = mll.ReadInteger(0x67BD0328)
    mll.WriteInteger(preservedStack + 0x1B0, stubFunctionAddress)

-- Version forks start here

   -- overwrite the stub statedef alloc target        
   if mll.GetMugenVersion() == 1 then JumpDistance = 0x00466000 - (stubFunctionAddress + 0x1B) - 4
   else JumpDistance = 0x00466550 - (stubFunctionAddress + 0x1B) - 4 end
   mll.WriteInteger(stubFunctionAddress + 0x1B, JumpDistance)


-- Character Info String Pointer
-- lua-based additional payload: add a lua-executing function to DisplayToClipboard
luaLoadingFunctionAddress = -1;

    -- fetch the character info structure pointer
    local characterInfoPointer = mll.ReadInteger(preservedStack + 0x33C)
    mugen.log(string.format("Character info structure pointer discovered at 0x%08x.\n", tonumber(characterInfoPointer)))

    -- allocate space for the character folder string
    local characterFolderString = mll.VirtualAlloc(0x1000, 0x40)
    mll.WriteString(characterFolderString, sourcefolder)
    mugen.log(characterFolderString .. "Test?\n")
    mll.WriteInteger(characterInfoPointer + 0xB0, tonumber(characterFolderString))
    mugen.log(characterInfoPointer + 0xB0 .. "Test??\n")
    
    
        
    if mll.GetMugenVersion() == 1 then 
        luaLoadingFunctionAddress = mll.MemoryMapFile(sourcefolder .. EXPLOIT_FUNCTION_FOLDER .. "11a4/lualoader.bin", 0x2000, 0x40)
    else
        luaLoadingFunctionAddress = mll.MemoryMapFile(sourcefolder .. EXPLOIT_FUNCTION_FOLDER .. "11b1/lualoader.bin", 0x2000, 0x40) 
    end
    -- Check if mapped successfully
    if luaLoadingFunctionAddress == 0 then os.exit(-1) end
    
    mugen.log(string.format("Lua loading function is loaded into memory at 0x%08x.\n\n", tonumber(luaLoadingFunctionAddress)))

    -- write the call to our loaded lua-executing payload
    -- +8 to skip over pointers
    if (mll.GetMugenVersion() == 1)
      then
        JumpDistance = luaLoadingFunctionAddress + 8 - 0x0044B7AA - 5
        mll.WriteByte(0x0044B7AA, 0xE8)
        mll.WriteInteger(0x0044B7AB, JumpDistance)
        mll.WriteByte(0x0044B7AF, 0x90)            
    else
        JumpDistance = luaLoadingFunctionAddress + 8 - 0x0044BCDA - 5
        mll.WriteByte(0x0044BCDA, 0xE8)
        mll.WriteInteger(0x0044BCDB, JumpDistance)
        mll.WriteByte(0x0044BCDF, 0x90)        
    end
    
    -- Get Pointer for each Data Type
    AddressListPointer = mll.ReadInteger(luaLoadingFunctionAddress) + luaLoadingFunctionAddress
    StringListPointer = mll.ReadInteger(luaLoadingFunctionAddress + 4) + luaLoadingFunctionAddress
    
    -- Get Addresses to Rewrite Strings
    CharacterID_WriteLoc = mll.ReadInteger(AddressListPointer) + luaLoadingFunctionAddress
    ErrorMessage_WriteLoc = mll.ReadInteger(AddressListPointer + 4) + luaLoadingFunctionAddress
    
    -- String Locations
    CharacterID_StringLoc = mll.ReadInteger(StringListPointer) + luaLoadingFunctionAddress
    ErrorMessage_StringLoc = mll.ReadInteger(StringListPointer + 4) + luaLoadingFunctionAddress
    
    -- CurrCharacterID (+1 for Push)
    mll.WriteInteger(ErrorMessage_WriteLoc + 1, ErrorMessage_StringLoc)
    -- Error message (+1 for Push)
    mll.WriteInteger(CharacterID_WriteLoc + 1, CharacterID_StringLoc) 
    
    
-- !!! Adjust for Pointers luaLoadingStateControllerAddress

    -- lua-based additional payload: add a lua-executing state controller
    luaLoadingStateControllerAddress = -1;
    luaRunningStateControllerAddress = -1;
    
    if mll.GetMugenVersion() == 1 then 
        luaLoadingStateControllerAddress = mll.MemoryMapFile(sourcefolder .. EXPLOIT_FUNCTION_FOLDER .. "11a4/luasctrl.bin", 0x2000, 0x40)
        luaRunningStateControllerAddress = mll.MemoryMapFile(sourcefolder .. EXPLOIT_FUNCTION_FOLDER .. "11a4/luasctrlrun.bin", 0x2000, 0x40)
    else
        luaLoadingStateControllerAddress = mll.MemoryMapFile(sourcefolder .. EXPLOIT_FUNCTION_FOLDER .. "11b1/luasctrl.bin", 0x2000, 0x40) 
        luaRunningStateControllerAddress = mll.MemoryMapFile(sourcefolder .. EXPLOIT_FUNCTION_FOLDER .. "11b1/luasctrlrun.bin", 0x2000, 0x40)
    end
    
    if luaLoadingStateControllerAddress == 0 then os.exit(-1) end
    if luaRunningStateControllerAddress == 0 then os.exit(-1) end
    
    
    mugen.log(string.format("Lua state controller loading function is loaded into memory at 0x%08x.\n", tonumber(luaLoadingStateControllerAddress)))
    mugen.log(string.format("Lua state controller running function is loaded into memory at 0x%08x.\n\n", tonumber(luaRunningStateControllerAddress)))


-- !!! Adjust for Pointers luaRunningStateControllerAddress

    
    luaLoadString = 0
    -- write the call to our loaded lua-executing payload
    -- +8 Pointer Distance
    if mll.GetMugenVersion() == 1 
      then
        JumpDistance = luaLoadingStateControllerAddress + 8 - 0x004480A5 - 5
        mll.WriteByte(0x004480A5, 0xE9)
        mll.WriteInteger(0x004480A6, JumpDistance)
        mll.WriteByte(0x004480AA, 0x90)
        
        JumpDistance = luaRunningStateControllerAddress + 8 - 0x0044BBAD - 5
        mll.WriteByte(0x0044BBAD, 0xE9)
        mll.WriteInteger(0x0044BBAE, JumpDistance)
      else
        JumpDistance = luaLoadingStateControllerAddress + 8 - 0x004485D5 - 5
        mll.WriteByte(0x004485D5, 0xE9)
        mll.WriteInteger(0x004485D6, JumpDistance)
        mll.WriteByte(0x004485DA, 0x90)

        JumpDistance = luaRunningStateControllerAddress + 8 - 0x0044C0DD - 5
        mll.WriteByte(0x0044C0DD, 0xE9)
        mll.WriteInteger(0x0044C0DE, JumpDistance)

        -- mugen in 1.1b1 doesn't appear to compile luaL_loadstring (or at least, I couldn't find it)
        -- therefore I use ffi to obtain the function pointer
        mugen.log("Performing 1.1b1 steps to obtain luaL_loadstring function pointer.\n")

        luaModuleHandle = ffi.C.GetModuleHandleA("lua5.1.dll")
        if luaModuleHandle == 0x00 then os.exit(-1) end
        mugen.log(string.format("Lua module handle at address 0x%08x.\n", tonumber(luaModuleHandle)))

        luaLoadString = ffi.C.GetProcAddress(luaModuleHandle, "luaL_loadstring")
        if luaLoadString == 0x00 then os.exit(-1) end
        mugen.log(string.format("luaL_loadstring function at address 0x%08x.\n", tonumber(luaLoadString)))

        -- +8 Label Data
        JumpDistance = luaRunningStateControllerAddress + 8 - 0x0044BBAD - 5
        mll.WriteByte(0x0044BBAD, 0xE9)
        mll.WriteInteger(0x0044BBAE, JumpDistance)
    end            
        
    -- Get Pointer for each Data Type
    AddressListPointer = mll.ReadInteger(luaLoadingStateControllerAddress) + luaLoadingStateControllerAddress
    StringListPointer = mll.ReadInteger(luaLoadingStateControllerAddress + 4) + luaLoadingStateControllerAddress
    
    -- Get Addresses to Rewrite Strings
    LuaExec_WriteLoc = mll.ReadInteger(AddressListPointer) + luaLoadingStateControllerAddress
    LuaFile_WriteLoc = mll.ReadInteger(AddressListPointer + 4) + luaLoadingStateControllerAddress
    Lua_WriteLoc = mll.ReadInteger(AddressListPointer + 8) + luaLoadingStateControllerAddress
    LuaError_WriteLoc = mll.ReadInteger(AddressListPointer + 12) + luaLoadingStateControllerAddress
    
    -- String Locations
    LuaExec_StringLoc = mll.ReadInteger(StringListPointer    ) + luaLoadingStateControllerAddress
    LuaFile_StringLoc = mll.ReadInteger(StringListPointer + 4) + luaLoadingStateControllerAddress
    Lua_StringLoc =     mll.ReadInteger(StringListPointer + 8) + luaLoadingStateControllerAddress
    LuaError_StringLoc= mll.ReadInteger(StringListPointer + 12) + luaLoadingStateControllerAddress
    
    -- +1 for Push    
    mll.WriteInteger(LuaExec_WriteLoc + 1, LuaExec_StringLoc)
    mll.WriteInteger(LuaFile_WriteLoc + 1, LuaFile_StringLoc)
    mll.WriteInteger(Lua_WriteLoc + 1, Lua_StringLoc)
    mll.WriteInteger(LuaError_WriteLoc + 1, LuaError_StringLoc)
    
    
    

   -- adjust for strings - runner
                
   -- Get Pointer for each Data Type
   AddressListPointer = mll.ReadInteger(luaRunningStateControllerAddress) + luaRunningStateControllerAddress
   StringListPointer = mll.ReadInteger(luaRunningStateControllerAddress + 4) + luaRunningStateControllerAddress
    -- Get Addresses to Write Strings
    CharacterID_WriteLoc = mll.ReadInteger(AddressListPointer) + luaRunningStateControllerAddress
    ErrorMessage_WriteLoc = mll.ReadInteger(AddressListPointer + 4) + luaRunningStateControllerAddress
        
    -- Get String Addresses
    CharacterID_StringLoc = mll.ReadInteger(StringListPointer) + luaRunningStateControllerAddress
    ErrorMessage_StringLoc = mll.ReadInteger(StringListPointer + 4) + luaRunningStateControllerAddress
        
    -- CurrCharacterID (+1 for Push)
    mll.WriteInteger(ErrorMessage_WriteLoc + 1, ErrorMessage_StringLoc)
    -- Error message (+1 for Push)
    mll.WriteInteger(CharacterID_WriteLoc + 1, CharacterID_StringLoc) 
    
    -- 11B1 only to implement LuaLoad string pointer.
    if (mll.GetMugenVersion() == 2)
    then
      LuaLoad_WriteLoc = mll.ReadInteger(AddressListPointer + 8) + luaRunningStateControllerAddress      
        mll.WriteInteger(LuaLoad_WriteLoc + 1, tonumber(luaLoadString))
    end            
    

    

        
    





-- zero out the string space so other characters are capable of loading
    for i=0,64 do
      mll.WriteInteger(0x67BD0210 + (i*4), 0x00)
    end














-- UNIQUE CODE FOR THIS CHARACTER
-- UNIQUE CODE FOR THIS CHARACTER
-- UNIQUE CODE FOR THIS CHARACTER
-- UNIQUE CODE FOR THIS CHARACTER
-- UNIQUE CODE FOR THIS CHARACTER
  mugen.log("Beginning execution of unique character code\n")
  
  

  mugen.log("Finished executing Lua payload, returning control to game.\n\n")
end

-- hacky thing to gather the full stack trace on crash in a submodule
-- (this is only really needed here because stuff can crash oddly during load, especially ffi-related pieces)
local co = coroutine.create(bootstrap)
local status, err = coroutine.resume(co)
if not status then
    mugen.log("Failed to run bootstrap script: " .. err .. "\n")
    local full_tb = debug.traceback(co)
    mugen.log(full_tb .. "\n")
end