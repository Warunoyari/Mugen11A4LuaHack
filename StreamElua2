local EXPLOIT_FILENAME = "StreamElua2"

-- path to the library for C interface - you can move or rename this, but make sure not to   include the `.lua` extension in this constant.
local EXPLOIT_LIBRARY = "Supernull/MLL/mll"

-- location of the payload DLL files - feel free to modify + rename these, however, it may not load unless you leave the DLL extension intact
local EXPLOIT_FFILIB = "Supernull/Libraries/ffi.dll"
local EXPLOIT_LUALIB = "Supernull/Libraries/lua5.1.dll"

-- location of a folder containing any functions we will be memory-mapping and using
local EXPLOIT_FUNCTION_FOLDER = "Supernull/Functions/"

-- END CONFIGURATION

function bootstrap()

mugen.log("\n\nProcessing exploit script in " .. EXPLOIT_FILENAME .. '...\n')


-- Process to assign Character Path for LuaFile/DisplayToClipboard?
-- Must be in this file as File 1 allocates the assembly file to calculate it.

  -- get folder containing this elua file
  local sourcefile = debug.getinfo(1, "S").source
  local sourcefolder = string.sub(sourcefile, 2, string.len(sourcefile) - string.len(EXPLOIT_FILENAME))
  -- 1.1b1 restricts package.path to be `data/?.lua`, but we can just add another load path here
  package.path = package.path .. ";./?.lua;./?"

  -- Character Info String Pointer
  -- lua-based additional payload: add a lua-executing function to DisplayToClipboard
  -- allocate space for the character folder string
  CharacterInfoPointer = mll.ReadInteger(mugen.getbaseaddress() + 0xA78)
  local characterFolderString = mll.VirtualAlloc(0x2000, 0x40)
  mll.WriteString(characterFolderString, sourcefolder)
  mll.WriteInteger(CharacterInfoPointer + 0xB0, tonumber(characterFolderString))
  mugen.log(string.format("Character info structure pointer discovered at 0x%08x.\n", tonumber(CharacterInfoPointer)))

   



-- UNIQUE CODE FOR YOUR CHARACTER
-- UNIQUE CODE FOR YOUR CHARACTER
-- UNIQUE CODE FOR YOUR CHARACTER
-- UNIQUE CODE FOR YOUR CHARACTER
-- UNIQUE CODE FOR YOUR CHARACTER
-- UNIQUE CODE FOR YOUR CHARACTER
mugen.log("Beginning execution of unique character code\n")





-- END OF BOOTSTRAP
end


local co = coroutine.create(bootstrap)
local status, err = coroutine.resume(co)
if not status then
    mugen.log("Failed to run bootstrap script: " .. err .. "\n")
    local full_tb = debug.traceback(co)
    mugen.log(full_tb .. "\n")
end