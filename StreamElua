-- Stream Exclusive ELUA File Template (Version 2 File Pointers)


--[[
Setting code up for loading 2nd LUA file when reading CMD.
Necessary for acquiring Info Pointer and PalNo dependent file reading.
The jump target from CMD file reading is the instruction after jmp Stream.exe+3555E
Reading CMD (before push) ESP +0x14 is Character Info Pointer 

mugen.exe+358CA - 80 7C 24 30 00        - cmp byte ptr [esp+30],00
>>> mugen.exe+358CF - 0F84 32FEFFFF         - je mugen.exe+35707
<<< mugen.exe+358D5 - 8B CE                 - mov ecx,esi
mugen.exe+358D7 - 51                    - push ecx
mugen.exe+358D8 - 68 806A4F00           - push mugen.exe+F6A80

Backup registers, don't bother to XOR them this time
Next we lookup our custom file path, find the two null terminators
Add the "2" for loading StreamElua2<null>.
Afterwards same procedure for calling LUA file
When finished, restore registers and jump back to CMD processing.
JMP START > 4358CF
JMP ENDED > 43585D

This time we are going to load a BIN file into a memory region and jump to that.
The reason is in File 2 it will be easier to disable the jump.
This does have a cost of allocating memory for each character but not a big deal.

--]]




-- DO NOT RENAME THIS FILE.
local EXPLOIT_FILENAME = "StreamElua"

-- path to the library for C interface - you can move or rename this, but make sure not to   include the `.lua` extension in this constant.
local EXPLOIT_LIBRARY = "Supernull/MLL/mll"

-- location of the payload DLL files - feel free to modify + rename these, however, it may not load unless you leave the DLL extension intact
local EXPLOIT_FFILIB = "Supernull/Libraries/ffi.dll"
local EXPLOIT_LUALIB = "Supernull/Libraries/lua5.1.dll"

-- location of a folder containing any functions we will be memory-mapping and using
local EXPLOIT_FUNCTION_FOLDER = "Supernull/Functions/"


function bootstrap()  

  -- get folder containing this elua file
  local sourcefile = debug.getinfo(1, "S").source
  local sourcefolder = string.sub(sourcefile, 2, string.len(sourcefile) - string.len(EXPLOIT_FILENAME))
  -- 1.1b1 restricts package.path to be `data/?.lua`, but we can just add another load path here
  package.path = package.path .. ";./?.lua;./?"

  -- attempt to load mll.lua -- we load this into the global table for use later
  _G.mll = require(sourcefolder .. EXPLOIT_LIBRARY)
  mll.LoadBaseLibraries(sourcefolder, EXPLOIT_LUALIB, EXPLOIT_FFILIB)

  if not mll.VirtualProtect(0x400000, 0x100000, 0x40)
    then
      mugen.log("Failed to execute Virtual Protect on 0x400000")
      os.exit(-1)
    end
  mugen.log("Successfully granted execute permissions in main memory regions.\n\n")




  luaLoadingFunctionAddress = mll.MemoryMapFile(sourcefolder .. EXPLOIT_FUNCTION_FOLDER .. "11a4/lualoader.bin", 0x2000, 0x40)  
    
  -- Check if mapped successfully
  if luaLoadingFunctionAddress == 0
    then
    mugen.log("Failed to map lualoader.bin")
      os.exit(-1)
    end    
  mugen.log(string.format("Lua loading function is loaded into memory at 0x%08x.\n\n", tonumber(luaLoadingFunctionAddress)))

  -- write the call to our loaded lua-executing payload
  -- +8 to skip over pointers

  JumpDistance = luaLoadingFunctionAddress + 8 - 0x0044B7AA - 5
  mll.WriteByte(0x0044B7AA, 0xE8)
  mll.WriteInteger(0x0044B7AB, JumpDistance)
  mll.WriteByte(0x0044B7AF, 0x90)            

  -- Get Pointer for each Data Type
  AddressListPointer = mll.ReadInteger(luaLoadingFunctionAddress) + luaLoadingFunctionAddress
  StringListPointer = mll.ReadInteger(luaLoadingFunctionAddress + 4) + luaLoadingFunctionAddress
    
  -- Get Addresses to Rewrite Strings
  CharacterID_WriteLoc = mll.ReadInteger(AddressListPointer) + luaLoadingFunctionAddress
  ErrorMessage_WriteLoc = mll.ReadInteger(AddressListPointer + 4) + luaLoadingFunctionAddress
    
  -- String Locations
  CharacterID_StringLoc = mll.ReadInteger(StringListPointer) + luaLoadingFunctionAddress
  ErrorMessage_StringLoc = mll.ReadInteger(StringListPointer + 4) + luaLoadingFunctionAddress
    
  -- CurrCharacterID (+1 for Push)
  mll.WriteInteger(ErrorMessage_WriteLoc + 1, ErrorMessage_StringLoc)
  -- Error message (+1 for Push)
  mll.WriteInteger(CharacterID_WriteLoc + 1, CharacterID_StringLoc)     
 



 
  -- lua-based additional payload: add a lua-executing state controller
  luaLoadingStateControllerAddress = -1;
  luaRunningStateControllerAddress = -1;

  luaLoadingStateControllerAddress = mll.MemoryMapFile(sourcefolder .. EXPLOIT_FUNCTION_FOLDER .. "11a4/luasctrl.bin", 0x2000, 0x40)
  luaRunningStateControllerAddress = mll.MemoryMapFile(sourcefolder .. EXPLOIT_FUNCTION_FOLDER .. "11a4/luasctrlrun.bin", 0x2000, 0x40)

    
  if luaLoadingStateControllerAddress == 0
    then
      mugen.log("Failed to map luasctrl.bin")
      os.exit(-1)
    end
  if luaRunningStateControllerAddress == 0 
    then
      mugen.log("Failed to map luasctrlrun.bin")
      os.exit(-1)
    end
    
    
  mugen.log(string.format("Lua state controller loading function is loaded into memory at 0x%08x.\n", tonumber(luaLoadingStateControllerAddress)))
  mugen.log(string.format("Lua state controller running function is loaded into memory at 0x%08x.\n\n", tonumber(luaRunningStateControllerAddress)))
   
  -- write the call to our loaded lua-executing payload
  -- +8 Pointer Distance
  
  JumpDistance = luaLoadingStateControllerAddress + 8 - 0x004480A5 - 5
  mll.WriteByte(0x004480A5, 0xE9)
  mll.WriteInteger(0x004480A6, JumpDistance)
  mll.WriteByte(0x004480AA, 0x90)
        
  JumpDistance = luaRunningStateControllerAddress + 8 - 0x0044BBAD - 5
  mll.WriteByte(0x0044BBAD, 0xE9)
  mll.WriteInteger(0x0044BBAE, JumpDistance)
   
  -- Get Pointer for each Data Type
  AddressListPointer = mll.ReadInteger(luaLoadingStateControllerAddress) + luaLoadingStateControllerAddress
  StringListPointer = mll.ReadInteger(luaLoadingStateControllerAddress + 4) + luaLoadingStateControllerAddress
    
  -- Get Addresses to Rewrite Strings
  LuaExec_WriteLoc = mll.ReadInteger(AddressListPointer) + luaLoadingStateControllerAddress
  LuaFile_WriteLoc = mll.ReadInteger(AddressListPointer + 4) + luaLoadingStateControllerAddress
  Lua_WriteLoc = mll.ReadInteger(AddressListPointer + 8) + luaLoadingStateControllerAddress
  LuaError_WriteLoc = mll.ReadInteger(AddressListPointer + 12) + luaLoadingStateControllerAddress
    
  -- String Locations
  LuaExec_StringLoc = mll.ReadInteger(StringListPointer    ) + luaLoadingStateControllerAddress
  LuaFile_StringLoc = mll.ReadInteger(StringListPointer + 4) + luaLoadingStateControllerAddress
  Lua_StringLoc =     mll.ReadInteger(StringListPointer + 8) + luaLoadingStateControllerAddress
  LuaError_StringLoc= mll.ReadInteger(StringListPointer + 12) + luaLoadingStateControllerAddress
    
  -- +1 for Push    
  mll.WriteInteger(LuaExec_WriteLoc + 1, LuaExec_StringLoc)
  mll.WriteInteger(LuaFile_WriteLoc + 1, LuaFile_StringLoc)
  mll.WriteInteger(Lua_WriteLoc + 1, Lua_StringLoc)
  mll.WriteInteger(LuaError_WriteLoc + 1, LuaError_StringLoc)
               
  -- Get Pointer for each Data Type
  AddressListPointer = mll.ReadInteger(luaRunningStateControllerAddress) + luaRunningStateControllerAddress
  StringListPointer = mll.ReadInteger(luaRunningStateControllerAddress + 4) + luaRunningStateControllerAddress
  
  -- Get Addresses to Write Strings
  CharacterID_WriteLoc = mll.ReadInteger(AddressListPointer) + luaRunningStateControllerAddress
  ErrorMessage_WriteLoc = mll.ReadInteger(AddressListPointer + 4) + luaRunningStateControllerAddress
        
  -- Get String Addresses
  CharacterID_StringLoc = mll.ReadInteger(StringListPointer) + luaRunningStateControllerAddress
  ErrorMessage_StringLoc = mll.ReadInteger(StringListPointer + 4) + luaRunningStateControllerAddress
        
  -- CurrCharacterID (+1 for Push)
  mll.WriteInteger(ErrorMessage_WriteLoc + 1, ErrorMessage_StringLoc)
  -- Error message (+1 for Push)
  mll.WriteInteger(CharacterID_WriteLoc + 1, CharacterID_StringLoc)
  


-- Here is where you can modify which DEF the game will load.
-- Included palno detector, detecting names will require more effort depending on slot.
-- PalNo [5040E8] Values (Value - 1) >> 12 == 11
-- P1 = 0x50C0
-- P2 = 0x6B9C
-- P3 = 0x50D4
-- P4 = 0x6BB0

MyPal = -1;

if (not player.indexisvalid(1)) then 
    MyPal = mll.ReadInteger(mugen.getbaseaddress() + 0x50C0) + 1    
elseif (not player.indexisvalid(2))
  then 
    MyPal = mll.ReadInteger(mugen.getbaseaddress() + 0x6B9C) + 1    
elseif (not player.indexisvalid(3))
  then
    MyPal = mll.ReadInteger(mugen.getbaseaddress() + 0x50D4) + 1    
else
    MyPal = mll.ReadInteger(mugen.getbaseaddress() + 0x6BB0) + 1    
end

CurrentDefAddress = mll.ReadInteger(mugen.getbaseaddress() + 0xA7C)
SavedDefAddress = CurrentDefAddress
LastSlash = -1
LastSlashAddress = -1
PathAnalyzed = false

while (PathAnalyzed == false)
  do
    CurrByte = mll.ReadByte(CurrentDefAddress)
    if (CurrByte == 0x2F)
      then
        LastSlashAddress = CurrentDefAddress + 1
      end
    if (CurrByte == 0x00) then PathAnalyzed = true end
    CurrentDefAddress = CurrentDefAddress + 1;
  end

--[[
if (MyPal == 1) then mll.WriteString(LastSlashAddress, "01P.def")
elseif (MyPal == 2) then mll.WriteString(LastSlashAddress, "02P.def")
elseif (MyPal == 3) then mll.WriteString(LastSlashAddress, "03P.def")
elseif (MyPal == 11) then mll.WriteString(LastSlashAddress, "11P.def")
elseif (MyPal == 12) then mll.WriteString(LastSlashAddress, "12P.def")
else mll.WriteString(LastSlashAddress, "04P.def") end
--]]


mugen.log("Disabling ST = Supernull.st")

-- Disable Loading ST = Supernull.st process when using Custom EXE
-- Not strictly necessary, better stability/consistency in code.
-- 00435AE2 - 8B F0                 - mov esi,eax
-- 00435AE4 - 83 C4 08              - add esp,08 { 8 }
-- 00435AE7 - 85 F6                 - test esi,esi
-- 00435AE9 - 0F84 18FCFFFF         - je 00435707
-- 00435AEF - 8D 4C 24 30           - lea ecx,[esp+30]

-- As we are injecting only from here, ESI will always be valid, so we don't need the jump condition.
-- ECX available for free use.

-- Cancel loading
  CancelSupernullLoad = mll.MemoryMapFile(sourcefolder .. "CancelSupernull.bin", 0x2000, 0x40)
  JumpDistance = CancelSupernullLoad - 0x00435AE9 - 5
  mll.WriteByte(0x00435AE9, 0xE9)
  mll.WriteInteger(0x00435AEA, JumpDistance)
  

-- Setup Loading File 2
  StreamElua2Address = mll.MemoryMapFile(sourcefolder .. "LoadLua11A4.bin", 0x2000, 0x40)
  JumpDistance = StreamElua2Address - 0x004358CF - 5
  mll.WriteByte(0x004358CF, 0xE9)
  mll.WriteInteger(0x004358D0, JumpDistance)
  mugen.log("Finished first step\n\n")
  
  
  
  
  
  
  
  
  
end

-- hacky thing to gather the full stack trace on crash in a submodule
-- (this is only really needed here because stuff can crash oddly during load, especially ffi-related pieces)
local co = coroutine.create(bootstrap)
local status, err = coroutine.resume(co)
if not status then
    mugen.log("Failed to run bootstrap script: " .. err .. "\n")
    local full_tb = debug.traceback(co)
    mugen.log(full_tb .. "\n")
end
